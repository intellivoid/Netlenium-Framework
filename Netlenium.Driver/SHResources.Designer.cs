//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Netlenium.Driver {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "15.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class SHResources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal SHResources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Netlenium.Driver.SHResources", typeof(SHResources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var IsElementHasScrollbar = function(element) {
        ///
        ///    if (element.tagName === document.scrollingElement.tagName &amp;&amp; typeof window.innerWidth === &quot;number&quot;) {
        ///        var scrollHeight = Math.max(
        ///            document.body.scrollHeight, document.documentElement.scrollHeight,
        ///            document.body.offsetHeight, document.documentElement.offsetHeight,
        ///            document.body.clientHeight, document.documentElement.clientHeight
        ///        );
        ///
        ///        return scrollHeight &gt; document.documentElement.clientHe [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetAllElementsWithScrollBars {
            get {
                return ResourceManager.GetString("GetAllElementsWithScrollBars", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function absoluteXPath(element) {
        ///    var comp;
        ///    var comps = [];
        ///    var xpath = &quot;&quot;;
        ///    var getPos = function(element) {
        ///        var position = 1, curNode;
        ///        if (element.nodeType == Node.ATTRIBUTE_NODE) {
        ///            return null;
        ///        }
        ///        for (curNode = element.previousSibling; curNode; curNode = curNode.previousSibling) {
        ///
        ///            if (curNode.nodeName == element.nodeName) {
        ///                ++position;
        ///            }
        ///        }
        ///        return position;
        ///    };
        ///
        ///    if ( [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetElementAbsoluteXPath {
            get {
                return ResourceManager.GetString("GetElementAbsoluteXPath", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///var left = parseInt(ele.offset().left);
        ///var top = parseInt(ele.offset().top);
        ///var right = parseInt(left + ele.outerWidth());
        ///var bottom = parseInt(top + ele.outerHeight());
        ///var x = Math.max(left, 0);
        ///var y = Math.max(top, 0);
        ///var str = JSON.stringify({
        ///    x: x,
        ///    y: y,
        ///    width: right - x,
        ///    height: bottom - y
        ///});
        ///return str;.
        /// </summary>
        internal static string GetElementCoordinates {
            get {
                return ResourceManager.GetString("GetElementCoordinates", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to function GetElement(byStr) {
        ///    var res = &quot;&quot;;
        ///    if (byStr.startsWith(&quot;By.XPath: &quot;)) {
        ///        res = byStr.replace(&quot;By.XPath: &quot;, &quot;&quot;);
        ///        res = res.replace(&quot;&apos;&quot;, &quot;\&apos;&quot;);
        ///        return document.evaluate(res, document, null, XPathResult.ORDERED_NODE_SNAPSHOT_TYPE, null).snapshotItem(0);
        ///    } else if (byStr.startsWith(&quot;By.Id: &quot;)) {
        ///        res = byStr.replace(&quot;By.Id: &quot;, &quot;&quot;);
        ///        return document.getElementById(res);
        ///    } else if (byStr.startsWith(&quot;By.TagName: &quot;)) {
        ///        res = byStr.repla [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetElementFromByStr {
            get {
                return ResourceManager.GetString("GetElementFromByStr", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///var win = $(window);
        ///var elementTop = ele.offset().top;
        ///var elementBottom = elementTop + ele.outerHeight();
        ///var viewportTop = win.scrollTop();
        ///var viewportBottom = viewportTop + win.height();
        ///var res = ele.is(&quot;:visible&quot;);
        ///return elementBottom &gt; viewportTop &amp;&amp; elementTop &lt; viewportBottom &amp;&amp; res;.
        /// </summary>
        internal static string GetElementVisibleState {
            get {
                return ResourceManager.GetString("GetElementVisibleState", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var  GetElementWithActiveScrollBar = function(elements) {
        ///    var jQueryElements = $(elements);
        ///    if (jQueryElements.length === 0) return null;
        ///    if (jQueryElements.first().get(0) === document.scrollingElement) return jQueryElements.get(0);
        ///    if (jQueryElements.length === 1) return jQueryElements.get(0);
        ///    var scrollBarsHeight = jQueryElements.map(function() {
        ///        return $(this)[0].scrollHeight;
        ///    });
        ///    var scrollBarWithMaxHeight = Math.max.apply(null, scrollBarsHeight.toArray());
        ///  [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string GetElementWithActiveScrollbar {
            get {
                return ResourceManager.GetString("GetElementWithActiveScrollbar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///ele.hide();.
        /// </summary>
        internal static string HideElementFromDOM {
            get {
                return ResourceManager.GetString("HideElementFromDOM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///ele.css(&quot;overflow&quot;, &quot;hidden&quot;);.
        /// </summary>
        internal static string RemoveScrollBar {
            get {
                return ResourceManager.GetString("RemoveScrollBar", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to /*! https://mths.be/scrollingelement v1.5.2 by @diegoperini &amp; @mathias | MIT license */
        ///if (!(&apos;scrollingElement&apos; in document)) (function () {
        ///
        ///    function computeStyle(element) {
        ///        if (window.getComputedStyle) {
        ///            // Support Firefox &lt; 4 which throws on a single parameter.
        ///            return getComputedStyle(element, null);
        ///        }
        ///        // Support Internet Explorer &lt; 9.
        ///        return element.currentStyle;
        ///    }
        ///
        ///    function isBodyElement(element) {
        ///        // The `instanc [rest of string was truncated]&quot;;.
        /// </summary>
        internal static string ScrollingElement {
            get {
                return ResourceManager.GetString("ScrollingElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = arguments[0];
        ///ele.scrollIntoView();.
        /// </summary>
        internal static string ScrollToElement {
            get {
                return ResourceManager.GetString("ScrollToElement", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = document.createElement(&quot;script&quot;);
        ///ele.src = &quot;https://ajax.aspnetcdn.com/ajax/jQuery/jquery-3.3.1.min.js&quot;;
        ///var body = document.getElementsByTagName(&quot;head&quot;)[0];
        ///body.appendChild(ele);.
        /// </summary>
        internal static string SetJQuery {
            get {
                return ResourceManager.GetString("SetJQuery", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///ele.show();.
        /// </summary>
        internal static string ShowElementInDOM {
            get {
                return ResourceManager.GetString("ShowElementInDOM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to var ele = $(arguments[0]);
        ///var value = arguments[1];
        ///ele.css(&quot;overflow&quot;, value);.
        /// </summary>
        internal static string ShowScrollBar {
            get {
                return ResourceManager.GetString("ShowScrollBar", resourceCulture);
            }
        }
    }
}
